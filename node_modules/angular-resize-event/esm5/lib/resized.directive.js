/**
 * @fileoverview added by tsickle
 * Generated from: lib/resized.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
import { ResizedEvent } from './resized-event';
var ResizedDirective = /** @class */ (function () {
    function ResizedDirective(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ResizedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // only initialize resize watching if sensor is available
        if (ResizeSensor) {
            this.resizeSensor = new ResizeSensor(this.element.nativeElement, (/**
             * @return {?}
             */
            function () { return _this.onResized(); }));
        }
    };
    /**
     * @return {?}
     */
    ResizedDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizeSensor) {
            this.resizeSensor.detach();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ResizedDirective.prototype.onResized = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        var newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        var event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.emit(event);
    };
    ResizedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resized]'
                },] }
    ];
    /** @nocollapse */
    ResizedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ResizedDirective.propDecorators = {
        resized: [{ type: Output }]
    };
    return ResizedDirective;
}());
export { ResizedDirective };
if (false) {
    /** @type {?} */
    ResizedDirective.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.resizeSensor;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlc2l6ZS1ldmVudC8iLCJzb3VyY2VzIjpbImxpYi9yZXNpemVkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQWFFLDBCQUE2QixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBUHZDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztJQVFwRCxDQUFDOzs7O0lBRUQsbUNBQVE7OztJQUFSO1FBQUEsaUJBS0M7UUFKQyx5REFBeUQ7UUFDekQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7OztZQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQWhCLENBQWdCLEVBQUMsQ0FBQztTQUMxRjtJQUNILENBQUM7Ozs7SUFFRCxzQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7Ozs7O0lBRU8sb0NBQVM7Ozs7SUFBakI7O1lBQ1EsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVc7O1lBQ2pELFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZO1FBRXpELElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDOUQsT0FBTztTQUNSOztZQUVLLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FDNUIsSUFBSSxDQUFDLE9BQU8sRUFDWixRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FDZjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7O2dCQWpERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCOzs7O2dCQU5tQixVQUFVOzs7MEJBUzNCLE1BQU07O0lBOENULHVCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FoRFksZ0JBQWdCOzs7SUFFM0IsbUNBQ29EOzs7OztJQUVwRCxvQ0FBeUI7Ozs7O0lBQ3pCLHFDQUEwQjs7Ozs7SUFFMUIsd0NBQW1DOzs7OztJQUV2QixtQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZXNpemVTZW5zb3IgfSBmcm9tICdjc3MtZWxlbWVudC1xdWVyaWVzJztcclxuaW1wb3J0IHsgUmVzaXplZEV2ZW50IH0gZnJvbSAnLi9yZXNpemVkLWV2ZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3Jlc2l6ZWRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzaXplZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgcmVhZG9ubHkgcmVzaXplZCA9IG5ldyBFdmVudEVtaXR0ZXI8UmVzaXplZEV2ZW50PigpO1xyXG5cclxuICBwcml2YXRlIG9sZFdpZHRoOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBvbGRIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgcHJpdmF0ZSByZXNpemVTZW5zb3I6IFJlc2l6ZVNlbnNvcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIC8vIG9ubHkgaW5pdGlhbGl6ZSByZXNpemUgd2F0Y2hpbmcgaWYgc2Vuc29yIGlzIGF2YWlsYWJsZVxyXG4gICAgaWYgKFJlc2l6ZVNlbnNvcikge1xyXG4gICAgICB0aGlzLnJlc2l6ZVNlbnNvciA9IG5ldyBSZXNpemVTZW5zb3IodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICgpID0+IHRoaXMub25SZXNpemVkKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5yZXNpemVTZW5zb3IpIHtcclxuICAgICAgdGhpcy5yZXNpemVTZW5zb3IuZGV0YWNoKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uUmVzaXplZCgpIHtcclxuICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICBjb25zdCBuZXdIZWlnaHQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgaWYgKG5ld1dpZHRoID09PSB0aGlzLm9sZFdpZHRoICYmIG5ld0hlaWdodCA9PT0gdGhpcy5vbGRIZWlnaHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGV2ZW50ID0gbmV3IFJlc2l6ZWRFdmVudChcclxuICAgICAgdGhpcy5lbGVtZW50LFxyXG4gICAgICBuZXdXaWR0aCxcclxuICAgICAgbmV3SGVpZ2h0LFxyXG4gICAgICB0aGlzLm9sZFdpZHRoLFxyXG4gICAgICB0aGlzLm9sZEhlaWdodFxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLm9sZFdpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICB0aGlzLm9sZEhlaWdodCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICB0aGlzLnJlc2l6ZWQuZW1pdChldmVudCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=