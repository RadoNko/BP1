{"version":3,"sources":["ng://angular-resize-event/lib/resized-event.ts","ng://angular-resize-event/lib/resized.directive.ts","ng://angular-resize-event/lib/angular-resized-event.module.ts"],"names":["ResizedEvent","element","newWidth","newHeight","oldWidth","oldHeight","this","ResizedDirective","resized","EventEmitter","prototype","ngOnInit","_this","ResizeSensor","resizeSensor","nativeElement","onResized","ngOnDestroy","detach","clientWidth","clientHeight","event","emit","Directive","args","selector","ElementRef","Output","AngularResizedEventModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"iaAEA,IAAAA,EACE,SAAAA,EACWC,EACAC,EACAC,EACAC,EACAC,GAJAC,KAAAL,QAAAA,EACAK,KAAAJ,SAAAA,EACAI,KAAAH,UAAAA,EACAG,KAAAF,SAAAA,EACAE,KAAAD,UAAAA,GCRbE,EAAA,WAiBE,SAAAA,EAA6BN,GAAAK,KAAAL,QAAAA,EAPpBK,KAAAE,QAAU,IAAIC,EAAAA,aA6CzB,OAnCEF,EAAAG,UAAAC,SAAA,WAAA,IAAAC,EAAAN,KAEMO,EAAAA,eACFP,KAAKQ,aAAe,IAAID,EAAAA,aAAaP,KAAKL,QAAQc,cAAa,WAAQ,OAAAH,EAAKI,gBAIhFT,EAAAG,UAAAO,YAAA,WACMX,KAAKQ,cACPR,KAAKQ,aAAaI,UAIdX,EAAAG,UAAAM,UAAR,eACQd,EAAWI,KAAKL,QAAQc,cAAcI,YACtChB,EAAYG,KAAKL,QAAQc,cAAcK,aAE7C,GAAIlB,IAAaI,KAAKF,UAAYD,IAAcG,KAAKD,UAArD,KAIMgB,EAAQ,IAAIrB,EAChBM,KAAKL,QACLC,EACAC,EACAG,KAAKF,SACLE,KAAKD,WAGPC,KAAKF,SAAWE,KAAKL,QAAQc,cAAcI,YAC3Cb,KAAKD,UAAYC,KAAKL,QAAQc,cAAcK,aAE5Cd,KAAKE,QAAQc,KAAKD,yBAhDrBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,yDALQC,EAAAA,+CASjBC,EAAAA,UA8CHpB,EAvDA,GCAAqB,EAAA,WAIA,SAAAA,KAKyC,2BALxCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CAACvB,GACfwB,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC1B,OAE6BqB,EATzC","sourcesContent":["import { ElementRef } from '@angular/core';\r\n\r\nexport class ResizedEvent {\r\n  constructor(\r\n    readonly element: ElementRef,\r\n    readonly newWidth: number,\r\n    readonly newHeight: number,\r\n    readonly oldWidth: number,\r\n    readonly oldHeight: number\r\n  ) {}\r\n}\r\n","import { Directive, ElementRef, EventEmitter, OnInit, Output, OnDestroy } from '@angular/core';\r\nimport { ResizeSensor } from 'css-element-queries';\r\nimport { ResizedEvent } from './resized-event';\r\n\r\n@Directive({\r\n  selector: '[resized]'\r\n})\r\nexport class ResizedDirective implements OnInit, OnDestroy {\r\n\r\n  @Output()\r\n  readonly resized = new EventEmitter<ResizedEvent>();\r\n\r\n  private oldWidth: number;\r\n  private oldHeight: number;\r\n\r\n  private resizeSensor: ResizeSensor;\r\n\r\n  constructor(private readonly element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // only initialize resize watching if sensor is available\r\n    if (ResizeSensor) {\r\n      this.resizeSensor = new ResizeSensor(this.element.nativeElement, () => this.onResized());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.resizeSensor) {\r\n      this.resizeSensor.detach();\r\n    }\r\n  }\r\n\r\n  private onResized() {\r\n    const newWidth = this.element.nativeElement.clientWidth;\r\n    const newHeight = this.element.nativeElement.clientHeight;\r\n\r\n    if (newWidth === this.oldWidth && newHeight === this.oldHeight) {\r\n      return;\r\n    }\r\n\r\n    const event = new ResizedEvent(\r\n      this.element,\r\n      newWidth,\r\n      newHeight,\r\n      this.oldWidth,\r\n      this.oldHeight\r\n    );\r\n\r\n    this.oldWidth = this.element.nativeElement.clientWidth;\r\n    this.oldHeight = this.element.nativeElement.clientHeight;\r\n\r\n    this.resized.emit(event);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResizedDirective } from './resized.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResizedDirective],\r\n  imports: [CommonModule],\r\n  exports: [ResizedDirective]\r\n})\r\nexport class AngularResizedEventModule { }\r\n"]}