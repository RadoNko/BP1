/**
 * @fileoverview added by tsickle
 * Generated from: lib/gridsterConfigS.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function GridsterConfigS() { }
if (false) {
    /** @type {?} */
    GridsterConfigS.prototype.gridType;
    /** @type {?|undefined} */
    GridsterConfigS.prototype.scale;
    /** @type {?} */
    GridsterConfigS.prototype.fixedColWidth;
    /** @type {?} */
    GridsterConfigS.prototype.fixedRowHeight;
    /** @type {?} */
    GridsterConfigS.prototype.keepFixedHeightInMobile;
    /** @type {?} */
    GridsterConfigS.prototype.keepFixedWidthInMobile;
    /** @type {?} */
    GridsterConfigS.prototype.setGridSize;
    /** @type {?} */
    GridsterConfigS.prototype.compactType;
    /** @type {?} */
    GridsterConfigS.prototype.mobileBreakpoint;
    /** @type {?} */
    GridsterConfigS.prototype.minCols;
    /** @type {?} */
    GridsterConfigS.prototype.maxCols;
    /** @type {?} */
    GridsterConfigS.prototype.minRows;
    /** @type {?} */
    GridsterConfigS.prototype.maxRows;
    /** @type {?} */
    GridsterConfigS.prototype.defaultItemCols;
    /** @type {?} */
    GridsterConfigS.prototype.defaultItemRows;
    /** @type {?} */
    GridsterConfigS.prototype.maxItemCols;
    /** @type {?} */
    GridsterConfigS.prototype.maxItemRows;
    /** @type {?} */
    GridsterConfigS.prototype.minItemCols;
    /** @type {?} */
    GridsterConfigS.prototype.minItemRows;
    /** @type {?} */
    GridsterConfigS.prototype.minItemArea;
    /** @type {?} */
    GridsterConfigS.prototype.maxItemArea;
    /** @type {?} */
    GridsterConfigS.prototype.margin;
    /** @type {?} */
    GridsterConfigS.prototype.outerMargin;
    /** @type {?} */
    GridsterConfigS.prototype.outerMarginTop;
    /** @type {?} */
    GridsterConfigS.prototype.outerMarginRight;
    /** @type {?} */
    GridsterConfigS.prototype.outerMarginBottom;
    /** @type {?} */
    GridsterConfigS.prototype.outerMarginLeft;
    /** @type {?} */
    GridsterConfigS.prototype.useTransformPositioning;
    /** @type {?} */
    GridsterConfigS.prototype.scrollSensitivity;
    /** @type {?} */
    GridsterConfigS.prototype.scrollSpeed;
    /** @type {?} */
    GridsterConfigS.prototype.draggable;
    /** @type {?} */
    GridsterConfigS.prototype.resizable;
    /** @type {?} */
    GridsterConfigS.prototype.swap;
    /** @type {?} */
    GridsterConfigS.prototype.swapWhileDragging;
    /** @type {?} */
    GridsterConfigS.prototype.pushItems;
    /** @type {?} */
    GridsterConfigS.prototype.disablePushOnDrag;
    /** @type {?} */
    GridsterConfigS.prototype.disablePushOnResize;
    /** @type {?} */
    GridsterConfigS.prototype.disableAutoPositionOnConflict;
    /** @type {?} */
    GridsterConfigS.prototype.pushDirections;
    /** @type {?} */
    GridsterConfigS.prototype.pushResizeItems;
    /** @type {?} */
    GridsterConfigS.prototype.displayGrid;
    /** @type {?} */
    GridsterConfigS.prototype.disableWindowResize;
    /** @type {?} */
    GridsterConfigS.prototype.disableWarnings;
    /** @type {?} */
    GridsterConfigS.prototype.scrollToNewItems;
    /** @type {?|undefined} */
    GridsterConfigS.prototype.disableScrollHorizontal;
    /** @type {?|undefined} */
    GridsterConfigS.prototype.disableScrollVertical;
    /** @type {?} */
    GridsterConfigS.prototype.enableEmptyCellClick;
    /** @type {?} */
    GridsterConfigS.prototype.enableEmptyCellContextMenu;
    /** @type {?} */
    GridsterConfigS.prototype.enableEmptyCellDrop;
    /** @type {?} */
    GridsterConfigS.prototype.enableEmptyCellDrag;
    /** @type {?} */
    GridsterConfigS.prototype.enableOccupiedCellDrop;
    /** @type {?} */
    GridsterConfigS.prototype.emptyCellDragMaxCols;
    /** @type {?} */
    GridsterConfigS.prototype.emptyCellDragMaxRows;
    /** @type {?} */
    GridsterConfigS.prototype.ignoreMarginInRow;
    /** @type {?} */
    GridsterConfigS.prototype.dirType;
    /** @type {?} */
    GridsterConfigS.prototype.api;
    /* Skipping unhandled member: [propName: string]: any;*/
}
/**
 * @record
 */
export function DragBase() { }
if (false) {
    /** @type {?} */
    DragBase.prototype.enabled;
    /** @type {?} */
    DragBase.prototype.delayStart;
    /* Skipping unhandled member: [propName: string]: any;*/
}
/**
 * @record
 */
export function Draggable() { }
if (false) {
    /** @type {?} */
    Draggable.prototype.ignoreContentClass;
    /** @type {?} */
    Draggable.prototype.ignoreContent;
    /** @type {?} */
    Draggable.prototype.dragHandleClass;
    /** @type {?} */
    Draggable.prototype.dropOverItems;
    /** @type {?} */
    Draggable.prototype.dropOverItemsCallback;
}
/**
 * @record
 */
export function Resizable() { }
if (false) {
    /** @type {?} */
    Resizable.prototype.handles;
}
/**
 * @record
 */
export function PushDirections() { }
if (false) {
    /** @type {?} */
    PushDirections.prototype.north;
    /** @type {?} */
    PushDirections.prototype.east;
    /** @type {?} */
    PushDirections.prototype.south;
    /** @type {?} */
    PushDirections.prototype.west;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0ZXJDb25maWdTLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZ3JpZHN0ZXIyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzdGVyQ29uZmlnUy5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJQSxxQ0FpRUM7OztJQWhFQyxtQ0FBb0I7O0lBQ3BCLGdDQUFlOztJQUNmLHdDQUFzQjs7SUFDdEIseUNBQXVCOztJQUN2QixrREFBaUM7O0lBQ2pDLGlEQUFnQzs7SUFDaEMsc0NBQXFCOztJQUNyQixzQ0FBMEI7O0lBQzFCLDJDQUF5Qjs7SUFDekIsa0NBQWdCOztJQUNoQixrQ0FBZ0I7O0lBQ2hCLGtDQUFnQjs7SUFDaEIsa0NBQWdCOztJQUNoQiwwQ0FBd0I7O0lBQ3hCLDBDQUF3Qjs7SUFDeEIsc0NBQW9COztJQUNwQixzQ0FBb0I7O0lBQ3BCLHNDQUFvQjs7SUFDcEIsc0NBQW9COztJQUNwQixzQ0FBb0I7O0lBQ3BCLHNDQUFvQjs7SUFDcEIsaUNBQWU7O0lBQ2Ysc0NBQXFCOztJQUNyQix5Q0FBOEI7O0lBQzlCLDJDQUFnQzs7SUFDaEMsNENBQWlDOztJQUNqQywwQ0FBK0I7O0lBQy9CLGtEQUFpQzs7SUFDakMsNENBQTBCOztJQUMxQixzQ0FBb0I7O0lBQ3BCLG9DQUFxQjs7SUFDckIsb0NBQXFCOztJQUNyQiwrQkFBYzs7SUFDZCw0Q0FBMkI7O0lBQzNCLG9DQUFtQjs7SUFDbkIsNENBQTJCOztJQUMzQiw4Q0FBNkI7O0lBQzdCLHdEQUF1Qzs7SUFDdkMseUNBQStCOztJQUMvQiwwQ0FBeUI7O0lBQ3pCLHNDQUEwQjs7SUFDMUIsOENBQTZCOztJQUM3QiwwQ0FBeUI7O0lBQ3pCLDJDQUEwQjs7SUFDMUIsa0RBQWtDOztJQUNsQyxnREFBZ0M7O0lBQ2hDLCtDQUE4Qjs7SUFDOUIscURBQW9DOztJQUNwQyw4Q0FBNkI7O0lBQzdCLDhDQUE2Qjs7SUFDN0IsaURBQWdDOztJQUNoQywrQ0FBNkI7O0lBQzdCLCtDQUE2Qjs7SUFDN0IsNENBQTJCOztJQUMzQixrQ0FBa0I7O0lBQ2xCLDhCQU1FOzs7Ozs7QUFLSiw4QkFLQzs7O0lBSkMsMkJBQWlCOztJQUNqQiw4QkFBbUI7Ozs7OztBQUtyQiwrQkFNQzs7O0lBTEMsdUNBQTJCOztJQUMzQixrQ0FBdUI7O0lBQ3ZCLG9DQUF3Qjs7SUFDeEIsa0NBQXVCOztJQUN2QiwwQ0FBK0c7Ozs7O0FBR2pILCtCQVdDOzs7SUFWQyw0QkFTRTs7Ozs7QUFHSixvQ0FLQzs7O0lBSkMsK0JBQWU7O0lBQ2YsOEJBQWM7O0lBQ2QsK0JBQWU7O0lBQ2YsOEJBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dyaWRzdGVyQ29tcG9uZW50SW50ZXJmYWNlfSBmcm9tICcuL2dyaWRzdGVyLmludGVyZmFjZSc7XG5pbXBvcnQge2NvbXBhY3RUeXBlcywgZGlyVHlwZXMsIGRpc3BsYXlHcmlkcywgZ3JpZFR5cGVzfSBmcm9tICcuL2dyaWRzdGVyQ29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQge0dyaWRzdGVySXRlbX0gZnJvbSAnLi9ncmlkc3Rlckl0ZW0uaW50ZXJmYWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBHcmlkc3RlckNvbmZpZ1Mge1xuICBncmlkVHlwZTogZ3JpZFR5cGVzO1xuICBzY2FsZT86IG51bWJlcjtcbiAgZml4ZWRDb2xXaWR0aDogbnVtYmVyO1xuICBmaXhlZFJvd0hlaWdodDogbnVtYmVyO1xuICBrZWVwRml4ZWRIZWlnaHRJbk1vYmlsZTogYm9vbGVhbjtcbiAga2VlcEZpeGVkV2lkdGhJbk1vYmlsZTogYm9vbGVhbjtcbiAgc2V0R3JpZFNpemU6IGJvb2xlYW47XG4gIGNvbXBhY3RUeXBlOiBjb21wYWN0VHlwZXM7XG4gIG1vYmlsZUJyZWFrcG9pbnQ6IG51bWJlcjtcbiAgbWluQ29sczogbnVtYmVyO1xuICBtYXhDb2xzOiBudW1iZXI7XG4gIG1pblJvd3M6IG51bWJlcjtcbiAgbWF4Um93czogbnVtYmVyO1xuICBkZWZhdWx0SXRlbUNvbHM6IG51bWJlcjtcbiAgZGVmYXVsdEl0ZW1Sb3dzOiBudW1iZXI7XG4gIG1heEl0ZW1Db2xzOiBudW1iZXI7XG4gIG1heEl0ZW1Sb3dzOiBudW1iZXI7XG4gIG1pbkl0ZW1Db2xzOiBudW1iZXI7XG4gIG1pbkl0ZW1Sb3dzOiBudW1iZXI7XG4gIG1pbkl0ZW1BcmVhOiBudW1iZXI7XG4gIG1heEl0ZW1BcmVhOiBudW1iZXI7XG4gIG1hcmdpbjogbnVtYmVyO1xuICBvdXRlck1hcmdpbjogYm9vbGVhbjtcbiAgb3V0ZXJNYXJnaW5Ub3A6IG51bWJlciB8IG51bGw7XG4gIG91dGVyTWFyZ2luUmlnaHQ6IG51bWJlciB8IG51bGw7XG4gIG91dGVyTWFyZ2luQm90dG9tOiBudW1iZXIgfCBudWxsO1xuICBvdXRlck1hcmdpbkxlZnQ6IG51bWJlciB8IG51bGw7XG4gIHVzZVRyYW5zZm9ybVBvc2l0aW9uaW5nOiBib29sZWFuO1xuICBzY3JvbGxTZW5zaXRpdml0eTogbnVtYmVyO1xuICBzY3JvbGxTcGVlZDogbnVtYmVyO1xuICBkcmFnZ2FibGU6IERyYWdnYWJsZTtcbiAgcmVzaXphYmxlOiBSZXNpemFibGU7XG4gIHN3YXA6IGJvb2xlYW47XG4gIHN3YXBXaGlsZURyYWdnaW5nOiBib29sZWFuO1xuICBwdXNoSXRlbXM6IGJvb2xlYW47XG4gIGRpc2FibGVQdXNoT25EcmFnOiBib29sZWFuO1xuICBkaXNhYmxlUHVzaE9uUmVzaXplOiBib29sZWFuO1xuICBkaXNhYmxlQXV0b1Bvc2l0aW9uT25Db25mbGljdDogYm9vbGVhbjtcbiAgcHVzaERpcmVjdGlvbnM6IFB1c2hEaXJlY3Rpb25zO1xuICBwdXNoUmVzaXplSXRlbXM6IGJvb2xlYW47XG4gIGRpc3BsYXlHcmlkOiBkaXNwbGF5R3JpZHM7XG4gIGRpc2FibGVXaW5kb3dSZXNpemU6IGJvb2xlYW47XG4gIGRpc2FibGVXYXJuaW5nczogYm9vbGVhbjtcbiAgc2Nyb2xsVG9OZXdJdGVtczogYm9vbGVhbjtcbiAgZGlzYWJsZVNjcm9sbEhvcml6b250YWw/OiBib29sZWFuO1xuICBkaXNhYmxlU2Nyb2xsVmVydGljYWw/OiBib29sZWFuO1xuICBlbmFibGVFbXB0eUNlbGxDbGljazogYm9vbGVhbjtcbiAgZW5hYmxlRW1wdHlDZWxsQ29udGV4dE1lbnU6IGJvb2xlYW47XG4gIGVuYWJsZUVtcHR5Q2VsbERyb3A6IGJvb2xlYW47XG4gIGVuYWJsZUVtcHR5Q2VsbERyYWc6IGJvb2xlYW47XG4gIGVuYWJsZU9jY3VwaWVkQ2VsbERyb3A6IGJvb2xlYW47XG4gIGVtcHR5Q2VsbERyYWdNYXhDb2xzOiBudW1iZXI7XG4gIGVtcHR5Q2VsbERyYWdNYXhSb3dzOiBudW1iZXI7XG4gIGlnbm9yZU1hcmdpbkluUm93OiBib29sZWFuO1xuICBkaXJUeXBlOiBkaXJUeXBlcztcbiAgYXBpOiB7XG4gICAgcmVzaXplOiAoKSA9PiB2b2lkLFxuICAgIG9wdGlvbnNDaGFuZ2VkOiAoKSA9PiB2b2lkLFxuICAgIGdldE5leHRQb3NzaWJsZVBvc2l0aW9uOiAobmV3SXRlbTogR3JpZHN0ZXJJdGVtKSA9PiBib29sZWFuLFxuICAgIGdldEZpcnN0UG9zc2libGVQb3NpdGlvbjogKGl0ZW06IEdyaWRzdGVySXRlbSkgPT4gR3JpZHN0ZXJJdGVtLFxuICAgIGdldExhc3RQb3NzaWJsZVBvc2l0aW9uOiAoaXRlbTogR3JpZHN0ZXJJdGVtKSA9PiBHcmlkc3Rlckl0ZW0sXG4gIH07XG5cbiAgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJhZ0Jhc2Uge1xuICBlbmFibGVkOiBib29sZWFuO1xuICBkZWxheVN0YXJ0OiBudW1iZXI7XG5cbiAgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJhZ2dhYmxlIGV4dGVuZHMgRHJhZ0Jhc2Uge1xuICBpZ25vcmVDb250ZW50Q2xhc3M6IHN0cmluZztcbiAgaWdub3JlQ29udGVudDogYm9vbGVhbjtcbiAgZHJhZ0hhbmRsZUNsYXNzOiBzdHJpbmc7XG4gIGRyb3BPdmVySXRlbXM6IGJvb2xlYW47XG4gIGRyb3BPdmVySXRlbXNDYWxsYmFjazogKHNvdXJjZTogR3JpZHN0ZXJJdGVtLCB0YXJnZXQ6IEdyaWRzdGVySXRlbSwgZ3JpZD86IEdyaWRzdGVyQ29tcG9uZW50SW50ZXJmYWNlKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2l6YWJsZSBleHRlbmRzIERyYWdCYXNlIHtcbiAgaGFuZGxlczoge1xuICAgIHM6IGJvb2xlYW4sXG4gICAgZTogYm9vbGVhbixcbiAgICBuOiBib29sZWFuLFxuICAgIHc6IGJvb2xlYW4sXG4gICAgc2U6IGJvb2xlYW4sXG4gICAgbmU6IGJvb2xlYW4sXG4gICAgc3c6IGJvb2xlYW4sXG4gICAgbnc6IGJvb2xlYW5cbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQdXNoRGlyZWN0aW9ucyB7XG4gIG5vcnRoOiBib29sZWFuO1xuICBlYXN0OiBib29sZWFuO1xuICBzb3V0aDogYm9vbGVhbjtcbiAgd2VzdDogYm9vbGVhbjtcbn1cbiJdfQ==