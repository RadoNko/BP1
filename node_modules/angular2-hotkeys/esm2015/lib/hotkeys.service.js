import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Hotkey } from './hotkey.model';
import { Subject } from 'rxjs';
import { HotkeyOptions } from './hotkey.options';
import 'mousetrap';
import * as i0 from "@angular/core";
import * as i1 from "./hotkey.options";
let HotkeysService = class HotkeysService {
    constructor(options) {
        this.options = options;
        this.hotkeys = [];
        this.pausedHotkeys = [];
        this.cheatSheetToggle = new Subject();
        this.preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];
        // noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
        Mousetrap.prototype.stopCallback = (event, element, combo, callback) => {
            // if the element has the class "mousetrap" then no need to stop
            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                return false;
            }
            return (element.contentEditable && element.contentEditable === 'true');
        };
        this.mousetrap = new Mousetrap();
        if (!this.options.disableCheatSheet) {
            this.add(new Hotkey(this.options.cheatSheetHotkey || '?', function (_) {
                this.cheatSheetToggle.next();
            }.bind(this), [], this.options.cheatSheetDescription || 'Show / hide this help menu'));
        }
        if (this.options.cheatSheetCloseEsc) {
            this.add(new Hotkey('esc', function (_) {
                this.cheatSheetToggle.next(false);
            }.bind(this), ['HOTKEYS-CHEATSHEET'], this.options.cheatSheetCloseEscDescription || 'Hide this help menu'));
        }
    }
    add(hotkey, specificEvent) {
        if (Array.isArray(hotkey)) {
            const temp = [];
            for (const key of hotkey) {
                temp.push(this.add(key, specificEvent));
            }
            return temp;
        }
        this.remove(hotkey);
        this.hotkeys.push(hotkey);
        this.mousetrap.bind(hotkey.combo, (event, combo) => {
            let shouldExecute = true;
            // if the callback is executed directly `hotkey.get('w').callback()`
            // there will be no event, so just execute the callback.
            if (event) {
                const target = (event.target || event.srcElement); // srcElement is IE only
                const nodeName = target.nodeName.toUpperCase();
                // check if the input has a mousetrap class, and skip checking preventIn if so
                if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                    shouldExecute = true;
                }
                else if (this.preventIn.indexOf(nodeName) > -1 &&
                    hotkey.allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1) {
                    // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn
                    shouldExecute = false;
                }
            }
            if (shouldExecute) {
                return hotkey.callback.apply(this, [event, combo]);
            }
        }, specificEvent);
        return hotkey;
    }
    remove(hotkey) {
        const temp = [];
        if (!hotkey) {
            for (const key of this.hotkeys) {
                temp.push(this.remove(key));
            }
            return temp;
        }
        if (Array.isArray(hotkey)) {
            for (const key of hotkey) {
                temp.push(this.remove(key));
            }
            return temp;
        }
        const index = this.findHotkey(hotkey);
        if (index > -1) {
            this.hotkeys.splice(index, 1);
            this.mousetrap.unbind(hotkey.combo);
            return hotkey;
        }
        return null;
    }
    get(combo) {
        if (!combo) {
            return this.hotkeys;
        }
        if (Array.isArray(combo)) {
            const temp = [];
            for (const key of combo) {
                temp.push(this.get(key));
            }
            return temp;
        }
        for (const hotkey of this.hotkeys) {
            if (hotkey.combo.indexOf(combo) > -1) {
                return hotkey;
            }
        }
        return null;
    }
    // noinspection JSUnusedGlobalSymbols
    pause(hotkey) {
        if (!hotkey) {
            return this.pause(this.hotkeys);
        }
        if (Array.isArray(hotkey)) {
            const temp = [];
            for (const key of hotkey) {
                temp.push(this.pause(key));
            }
            return temp;
        }
        this.remove(hotkey);
        this.pausedHotkeys.push(hotkey);
        return hotkey;
    }
    // noinspection JSUnusedGlobalSymbols
    unpause(hotkey) {
        if (!hotkey) {
            return this.unpause(this.pausedHotkeys);
        }
        if (Array.isArray(hotkey)) {
            const temp = [];
            for (const key of hotkey) {
                temp.push(this.unpause(key));
            }
            return temp;
        }
        const index = this.pausedHotkeys.indexOf(hotkey);
        if (index > -1) {
            this.add(hotkey);
            return this.pausedHotkeys.splice(index, 1);
        }
        return null;
    }
    // noinspection JSUnusedGlobalSymbols
    reset() {
        this.mousetrap.reset();
    }
    findHotkey(hotkey) {
        return this.hotkeys.indexOf(hotkey);
    }
};
HotkeysService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HotkeyOptions,] }] }
];
HotkeysService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HotkeysService_Factory() { return new HotkeysService(i0.ɵɵinject(i1.HotkeyOptions)); }, token: HotkeysService, providedIn: "root" });
HotkeysService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(HotkeyOptions))
], HotkeysService);
export { HotkeysService };
//# sourceMappingURL=data:application/json;base64,