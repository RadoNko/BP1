{"version":3,"file":"angular-material-components-datetime-picker.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://@angular-material-components/datetime-picker/lib/core/date-adapter.ts","ng://@angular-material-components/datetime-picker/lib/core/date-formats.ts","ng://@angular-material-components/datetime-picker/lib/utils/date-utils.ts","ng://@angular-material-components/datetime-picker/lib/month-view.ts","ng://@angular-material-components/datetime-picker/lib/multi-year-view.ts","ng://@angular-material-components/datetime-picker/lib/year-view.ts","ng://@angular-material-components/datetime-picker/lib/calendar.ts","ng://@angular-material-components/datetime-picker/lib/timepicker.component.ts","ng://@angular-material-components/datetime-picker/lib/datetime-picker.component.ts","ng://@angular-material-components/datetime-picker/lib/datetime-input.ts","ng://@angular-material-components/datetime-picker/lib/timepicker.module.ts","ng://@angular-material-components/datetime-picker/lib/datetime-picker.module.ts","ng://@angular-material-components/datetime-picker/lib/core/native-date-adapter.ts","ng://@angular-material-components/datetime-picker/lib/core/native-date-formats.ts","ng://@angular-material-components/datetime-picker/lib/core/native-date.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class NgxMatDateAdapter<D> extends DateAdapter<D> {\r\n  /**\r\n * Gets the hour component of the given date.\r\n * @param date The date to extract the month from.\r\n * @returns The hour component.\r\n */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n* Gets the minute component of the given date.\r\n* @param date The date to extract the month from.\r\n* @returns The minute component.\r\n*/\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n  * Gets the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @returns The second component.\r\n  */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n  * Set the hour component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setHour(date: D, value: number): void;\r\n\r\n  /**\r\n  * Set the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setMinute(date: D, value: number): void;\r\n\r\n  /**\r\n   * Set the second component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @param value The value to set.\r\n   */\r\n  abstract setSecond(date: D, value: number): void;\r\n\r\n  /**\r\n   * Check if two date have same time\r\n   * @param a Date 1\r\n   * @param b Date 2\r\n   */\r\n  isSameTime(a: D, b: D): boolean {\r\n    if (a == null || b == null) return true;\r\n    return this.getHour(a) === this.getHour(b)\r\n      && this.getMinute(a) === this.getMinute(b)\r\n      && this.getSecond(a) === this.getSecond(b);\r\n  }\r\n\r\n  /**\r\n   * Copy time from a date to a another date\r\n   * @param toDate \r\n   * @param fromDate \r\n   */\r\n  copyTime(toDate: D, fromDate: D) {\r\n    this.setHour(toDate, this.getHour(fromDate));\r\n    this.setMinute(toDate, this.getMinute(fromDate));\r\n    this.setSecond(toDate, this.getSecond(fromDate));\r\n  }\r\n\r\n  /**\r\n * Compares two dates.\r\n * @param first The first date to compare.\r\n * @param second The second date to compare.\r\n * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n *     a number greater than 0 if the first date is later.\r\n */\r\n  compareDateWithTime(first: D, second: D, showSeconds?: boolean): number {\r\n    let res = super.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n    if (showSeconds) {\r\n      res = res || this.getSecond(first) - this.getSecond(second);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Set time by using default values\r\n   * @param defaultTime List default values [hour, minute, second]\r\n   */\r\n  setTimeByDefaultValues(date: D, defaultTime: number[]) {\r\n    if (!Array.isArray(defaultTime)) {\r\n      throw Error('@Input DefaultTime should be an array');\r\n    }\r\n    this.setHour(date, defaultTime[0] || 0);\r\n    this.setMinute(date, defaultTime[1] || 0);\r\n    this.setSecond(date, defaultTime[2] || 0);\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport type NgxMatDateFormats = {\r\n    parse: {\r\n        dateInput: any\r\n    },\r\n    display: {\r\n        dateInput: any,\r\n        monthYearLabel: any,\r\n        dateA11yLabel: any,\r\n        monthYearA11yLabel: any,\r\n    }\r\n};\r\n\r\n\r\nexport const NGX_MAT_DATE_FORMATS = new InjectionToken<NgxMatDateFormats>('ngx-mat-date-formats');\r\n","export const LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n}\r\n\r\nexport const MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n}\r\n\r\nexport const DEFAULT_STEP = 1;\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\n\r\nexport const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\n\r\nexport function formatTwoDigitTimeValue(val: number) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `NgxMatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n\r\n/** Formats a range of years. */\r\nexport function formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'ngxMatMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string, narrow: string }[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n          1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n          (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n            this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n          this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n          this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n          this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n          this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n      this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n        .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n        this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._initWeekdays();\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Initializes the weekdays. */\r\n  private _initWeekdays() {\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i] };\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1]\r\n        .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n      (!this.dateFilter || this.dateFilter(date)) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n      this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n      this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'ngxMatMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (!isSameMultiYearView(\r\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n\r\n    // We want a range years such that we maximize the number of\r\n    // enabled dates visible at once. This prevents issues where the minimum year\r\n    // is the last item of a page OR the maximum year is the first item of a page.\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view.\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          yearsPerPage - getActiveOffset(\r\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n          Math.floor((year2 - startingYear) / yearsPerPage);\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\r\n    yearsPerPage);\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, minDate: D | null, maxDate: D | null): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo (a: number, b: number): number {\r\n  return (a % b + b) % b;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatCalendarBody, MatCalendarCell } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'ngxMatYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const normalizedDate =\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate), month,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n      this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatCalendarCellCssClasses, MatDatepickerIntl } from '@angular/material/datepicker';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { getActiveOffset, isSameMultiYearView, NgxMatMultiYearView, yearsPerPage } from './multi-year-view';\r\nimport { createMissingDateImplError, formatYearRange } from './utils/date-utils';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for NgxMatCalendar */\r\n@Component({\r\n  selector: 'ngx-mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'ngxMatCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n    @Inject(forwardRef(() => NgxMatCalendar)) public calendar: NgxMatCalendar<D>,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view, and the last year is\r\n    // just yearsPerPage - 1 away.\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\r\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n    const minYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\r\n    const maxYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\r\n    return formatYearRange(minYearName, maxYearName);\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n      this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate,\r\n        this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return isSameMultiYearView(\r\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.scss'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'ngxMatCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(NgxMatMonthView) monthView: NgxMatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(NgxMatYearView) yearView: NgxMatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(NgxMatMultiYearView) multiYearView: NgxMatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxDateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change =\r\n      changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n      (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D | null): void {\r\n    if (date && !this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError, DEFAULT_STEP, formatTwoDigitTimeValue, LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND } from './utils/date-utils';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-timepicker',\r\n  templateUrl: './timepicker.component.html',\r\n  styleUrls: ['./timepicker.component.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-timepicker'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxMatTimepickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  exportAs: 'ngxMatTimepicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  public form: FormGroup;\r\n\r\n  @Input() disabled = false;\r\n  @Input() showSpinners = true;\r\n  @Input() stepHour: number = DEFAULT_STEP;\r\n  @Input() stepMinute: number = DEFAULT_STEP;\r\n  @Input() stepSecond: number = DEFAULT_STEP;\r\n  @Input() showSeconds = false;\r\n  @Input() disableMinute = false;\r\n  @Input() enableMeridian = false;\r\n  @Input() defaultTime: number[];\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public meridian: string = MERIDIANS.AM;\r\n\r\n  /** Hour */\r\n  private get hour() {\r\n    let val = Number(this.form.controls['hour'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get minute() {\r\n    let val = Number(this.form.controls['minute'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get second() {\r\n    let val = Number(this.form.controls['second'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  /** Whether or not the form is valid */\r\n  public get valid(): boolean {\r\n    return this.form.valid;\r\n  }\r\n\r\n  private _onChange: any = () => { };\r\n  private _onTouched: any = () => { };\r\n  private _disabled: boolean;\r\n  private _model: D;\r\n\r\n  private _destroyed: Subject<void> = new Subject<void>();\r\n\r\n  public pattern = PATTERN_INPUT_HOUR;\r\n\r\n  constructor(@Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    private cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n        minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n        second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n      this._updateModel();\r\n    })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.disabled && !changes.disabled.firstChange) {\r\n      this.disabled ? this.form.disable() : this.form.enable();\r\n    }\r\n\r\n    this.disableMinute ? this.form.get('minute').disable() : this.form.get('minute').enable();\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Writes a new value to the element.\r\n   * @param obj\r\n   */\r\n  writeValue(val: D): void {\r\n    if (val != null) {\r\n      this._model = val;\r\n    } else {\r\n      this._model = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._model, this.defaultTime);\r\n      }\r\n    }\r\n    this._updateHourMinuteSecond();\r\n  }\r\n\r\n  /** Registers a callback function that is called when the control's value changes in the UI. */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Enables or disables the appropriate DOM element */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Format input\r\n   * @param input \r\n   */\r\n  public formatInput(input: HTMLInputElement) {\r\n    input.value = input.value.replace(NUMERIC_REGEX, '');\r\n  }\r\n\r\n  /** Toggle meridian */\r\n  public toggleMeridian() {\r\n    this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n    this.change('hour');\r\n  }\r\n\r\n  /** Change property of time */\r\n  public change(prop: string, up?: boolean) {\r\n    const next = this._getNextValueByProp(prop, up);\r\n    this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n    this._updateModel();\r\n  }\r\n\r\n  /** Update controls of form by model */\r\n  private _updateHourMinuteSecond() {\r\n    let _hour = this._dateAdapter.getHour(this._model);\r\n    const _minute = this._dateAdapter.getMinute(this._model);\r\n    const _second = this._dateAdapter.getSecond(this._model);\r\n\r\n    if (this.enableMeridian) {\r\n      if (_hour > LIMIT_TIMES.meridian) {\r\n        _hour = _hour - LIMIT_TIMES.meridian;\r\n        this.meridian = MERIDIANS.PM;\r\n      } else {\r\n        this.meridian = MERIDIANS.AM;\r\n      }\r\n    }\r\n\r\n    this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));\r\n    this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));\r\n    this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));\r\n  }\r\n\r\n  /** Update model */\r\n  private _updateModel() {\r\n    let _hour = this.hour;\r\n    if (this.enableMeridian && this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n      _hour = _hour + LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    this._dateAdapter.setHour(this._model, _hour);\r\n    this._dateAdapter.setMinute(this._model, this.minute);\r\n    this._dateAdapter.setSecond(this._model, this.second);\r\n    this._onChange(this._model);\r\n  }\r\n\r\n  /**\r\n   * Get next value by property\r\n   * @param prop \r\n   * @param up\r\n   */\r\n  private _getNextValueByProp(prop: string, up?: boolean): number {\r\n    const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n    const min = LIMIT_TIMES[`min${keyProp}`];\r\n    let max = LIMIT_TIMES[`max${keyProp}`];\r\n\r\n    if (prop === 'hour' && this.enableMeridian) {\r\n      max = LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    let next;\r\n    if (up == null) {\r\n      next = this[prop] % (max);\r\n    } else {\r\n      next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        next = next % (max + 1);\r\n        if (next === 0) next = up ? 1 : max;\r\n      } else {\r\n        next = next % max;\r\n      }\r\n      if (up) {\r\n        next = next > max ? (next - max + min) : next;\r\n      } else {\r\n        next = next < min ? (next - min + max) : next;\r\n      }\r\n\r\n    }\r\n\r\n    return next;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ComponentRef, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, Optional, Output, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\r\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@angular/material/core';\r\nimport { MatCalendarCellCssClasses, matDatepickerAnimations, MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { NgxMatCalendar } from './calendar';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { createMissingDateImplError, DEFAULT_STEP } from './utils/date-utils';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\nimport { ValidationErrors } from '@angular/forms';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nclass MatDatepickerContentBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\r\n  mixinColor(MatDatepickerContentBase);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * NgxMatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-content',\r\n  templateUrl: 'datetime-content.component.html',\r\n  styleUrls: ['datetime-content.component.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'ngxMatDatetimeContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class NgxMatDatetimeContent<D> extends _MatDatepickerContentMixinBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatCalendar) _calendar: NgxMatCalendar<D>;\r\n\r\n  /** Reference to the internal time picker component. */\r\n  @ViewChild(NgxMatTimepickerComponent) _timePicker: NgxMatTimepickerComponent<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: NgxMatDatetimePicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  /** Whether or not the selected date is valid (min,max...) */\r\n  get valid(): boolean {\r\n    if(this.datepicker.hideTime) return this.datepicker.valid;\r\n    return this._timePicker && this._timePicker.valid && this.datepicker.valid;\r\n  }\r\n\r\n  get isViewMonth(): boolean {\r\n    if (!this._calendar || this._calendar.currentView == null) return true;\r\n    return this._calendar.currentView == 'month';\r\n  }\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDatetimePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatDatetimePicker<D> implements OnDestroy, CanColor {\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n      (this._datepickerInput ? this._datepickerInput._getThemePalette() : 'primary');\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  @Input()\r\n  get hideTime(): boolean { return this._hideTime; }\r\n  set hideTime(value: boolean) {\r\n    this._hideTime = coerceBooleanProperty(value);\r\n  }\r\n  public _hideTime = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n      this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  public _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** Whether the timepicker'spinners is shown. */\r\n  @Input()\r\n  get showSpinners(): boolean { return this._showSpinners; }\r\n  set showSpinners(value: boolean) { this._showSpinners = value; }\r\n  public _showSpinners = true;\r\n\r\n  /** Whether the second part is disabled. */\r\n  @Input()\r\n  get showSeconds(): boolean { return this._showSeconds; }\r\n  set showSeconds(value: boolean) { this._showSeconds = value; }\r\n  public _showSeconds = false;\r\n\r\n  /** Step hour */\r\n  @Input()\r\n  get stepHour(): number { return this._stepHour; }\r\n  set stepHour(value: number) { this._stepHour = value; }\r\n  public _stepHour: number = DEFAULT_STEP;\r\n\r\n  /** Step minute */\r\n  @Input()\r\n  get stepMinute(): number { return this._stepMinute; }\r\n  set stepMinute(value: number) { this._stepMinute = value; }\r\n  public _stepMinute: number = DEFAULT_STEP;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get stepSecond(): number { return this._stepSecond; }\r\n  set stepSecond(value: number) { this._stepSecond = value; }\r\n  public _stepSecond: number = DEFAULT_STEP;\r\n\r\n  /** Enable meridian */\r\n  @Input()\r\n  get enableMeridian(): boolean { return this._enableMeridian; }\r\n  set enableMeridian(value: boolean) { this._enableMeridian = value; }\r\n  public _enableMeridian: boolean = false;\r\n\r\n  /** disable minute */\r\n  @Input()\r\n  get disableMinute(): boolean { return this._disableMinute; }\r\n  set disableMinute(value: boolean) { this._disableMinute = value; }\r\n  public _disableMinute: boolean;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get defaultTime(): number[] { return this._defaultTime; }\r\n  set defaultTime(value: number[]) { this._defaultTime = value; }\r\n  public _defaultTime: number[];\r\n\r\n  private _hasBackdrop: boolean = true;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get valid(): boolean {\r\n    const minValidators = this._minValidator();\r\n    const maxValidators = this._maxValidator();\r\n    return minValidators == null && maxValidators == null;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<NgxMatDatetimeContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: NgxMatDatetimeInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  /** Raw value before  */\r\n  private _rawValue: D;\r\n\r\n  constructor(private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator = (): ValidationErrors | null => {\r\n    return (!this._minDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._minDate, this._selected, this.showSeconds) <= 0) ?\r\n      null : { 'matDatetimePickerMin': { 'min': this._minDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator = (): ValidationErrors | null => {\r\n    return (!this._maxDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._maxDate, this._selected, this.showSeconds) >= 0) ?\r\n      null : { 'matDatetimePickerMax': { 'max': this._maxDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    this._dateAdapter.copyTime(date, this._selected);\r\n    this._selected = date;\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** OK button handler and close*/\r\n  public ok(): void {\r\n    const cloned = this._dateAdapter.clone(this._selected);\r\n    this._selectedChanged.next(cloned);\r\n    this.close();\r\n  }\r\n\r\n  /** Cancel and close */\r\n  public cancel(): void {\r\n    this._selected = this._rawValue;\r\n    this.close();\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: NgxMatDatetimeInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A NgxMatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n      this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    this._rawValue = this._selected != null\r\n      ? this._dateAdapter.clone(this._selected) : null;\r\n\r\n    if (this._selected == null) {\r\n      this._selected = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._selected, this.defaultTime);\r\n      }\r\n    }\r\n\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an NgxMatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n    // open at a time, however since we reset the variables in async handlers some overlays\r\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n    // by holding down the enter key).\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n      hasBackdrop: this._hasBackdrop\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent,\r\n        this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: this._hasBackdrop,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n          (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      (this._hasBackdrop && event) ? this.cancel() : this.close();\r\n\r\n    });\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, Optional, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nexport class MatDatetimePickerInputEvent<D> {\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n\r\n    constructor(\r\n        /** Reference to the datepicker input component that emitted the event. */\r\n        public target: NgxMatDatetimeInput<D>,\r\n        /** Reference to the native input element associated with the datepicker input. */\r\n        public targetElement: HTMLElement) {\r\n        this.value = this.target.value;\r\n    }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\n@Directive({\r\n    selector: 'input[ngxMatDatetimePicker]',\r\n    providers: [\r\n        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n        MAT_DATEPICKER_VALIDATORS,\r\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n    ],\r\n    host: {\r\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n        '[disabled]': 'disabled',\r\n        '(input)': '_onInput($event.target.value)',\r\n        '(change)': '_onChange()',\r\n        '(blur)': '_onBlur()',\r\n        '(focus)': '_onFocus()',\r\n        '(keydown)': '_onKeydown($event)',\r\n    },\r\n    exportAs: 'ngxMatDatetimePickerInput',\r\n})\r\nexport class NgxMatDatetimeInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n    /** The datepicker that this input is associated with. */\r\n    @Input()\r\n    set ngxMatDatetimePicker(value: NgxMatDatetimePicker<D>) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        this._datepicker = value;\r\n        this._datepicker._registerInput(this);\r\n        this._datepickerSubscription.unsubscribe();\r\n\r\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    _datepicker: NgxMatDatetimePicker<D>;\r\n\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    @Input()\r\n    set ngxMatDatetimePickerFilter(value: (date: D | null) => boolean) {\r\n        this._dateFilter = value;\r\n        this._validatorOnChange();\r\n    }\r\n    _dateFilter: (date: D | null) => boolean;\r\n\r\n    /** The value of the input. */\r\n    @Input()\r\n    get value(): D | null { return this._value; }\r\n    set value(value: D | null) {\r\n        value = this._dateAdapter.deserialize(value);\r\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n        value = this._getValidDateOrNull(value);\r\n        const oldDate = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n\r\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    private _value: D | null;\r\n\r\n    /** The minimum valid date. */\r\n    @Input()\r\n    get min(): D | null { return this._min; }\r\n    set min(value: D | null) {\r\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _min: D | null;\r\n\r\n    /** The maximum valid date. */\r\n    @Input()\r\n    get max(): D | null { return this._max; }\r\n    set max(value: D | null) {\r\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _max: D | null;\r\n\r\n    /** Whether the datepicker-input is disabled. */\r\n    @Input()\r\n    get disabled(): boolean { return !!this._disabled; }\r\n    set disabled(value: boolean) {\r\n        const newValue = value != null && `${value}` !== 'false';\r\n        const element = this._elementRef.nativeElement;\r\n\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.emit(newValue);\r\n        }\r\n\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    private _disabled: boolean;\r\n\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    @Output() readonly dateChange: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    @Output() readonly dateInput: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange = new EventEmitter<D | null>();\r\n\r\n    /** Emits when the disabled state has changed */\r\n    _disabledChange = new EventEmitter<boolean>();\r\n\r\n    _onTouched = () => { };\r\n\r\n    private _cvaOnChange: (value: any) => void = () => { };\r\n\r\n    private _validatorOnChange = () => { };\r\n\r\n    private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n    private _localeSubscription = Subscription.EMPTY;\r\n\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n        return this._lastValueValid ?\r\n            null : { 'matDatetimePickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n    }\r\n\r\n    /** The form control validator for the min date. */\r\n    private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.min || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.min, controlValue, this._datepicker.showSeconds) <= 0) ?\r\n            null : { 'matDatetimePickerMin': { 'min': this.min, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.max || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.max, controlValue, this._datepicker.showSeconds) >= 0) ?\r\n            null : { 'matDatetimePickerMax': { 'max': this.max, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n            null : { 'matDatetimePickerFilter': true };\r\n    }\r\n\r\n    /** The combined form control validator for this input. */\r\n    private _validator: ValidatorFn | null =\r\n        Validators.compose(\r\n            [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid = false;\r\n\r\n    constructor(\r\n        private _elementRef: ElementRef<HTMLInputElement>,\r\n        @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n        @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n        @Optional() private _formField: MatFormField) {\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n\r\n        // Update the displayed date when the locale changes.\r\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n            this.value = this.value;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._localeSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this._disabledChange.complete();\r\n    }\r\n\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._validatorOnChange = fn;\r\n    }\r\n\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef(): ElementRef {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value: D): void {\r\n        this.value = value;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._cvaOnChange = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn: () => void): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    _onKeydown(event: KeyboardEvent) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._datepicker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _onInput(value: string) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n        date = this._getValidDateOrNull(date);\r\n\r\n        const isSameTime = this._dateAdapter.isSameTime(date, this._value);\r\n\r\n        if ((date != null && (!isSameTime || !this._dateAdapter.sameDate(date, this._value)))\r\n            || (date == null && this._value != null)) {\r\n            this._value = date;\r\n            this._cvaOnChange(date);\r\n            this._valueChange.emit(date);\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        } else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n\r\n    _onChange() {\r\n        this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette(): ThemePalette {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n\r\n        this._onTouched();\r\n    }\r\n\r\n    /** Handles focus events on the input. */\r\n    _onFocus() {\r\n        // Close datetime picker if opened\r\n        if (this._datepicker && this._datepicker.opened) {\r\n            this._datepicker.cancel();\r\n        }\r\n    }\r\n\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue(value: D | null) {\r\n        this._elementRef.nativeElement.value =\r\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    }\r\n\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull(obj: any): D | null {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    NgxMatTimepickerComponent\r\n  ],\r\n  declarations: [\r\n    NgxMatTimepickerComponent\r\n  ]\r\n})\r\nexport class NgxMatTimepickerModule { }\r\n","import { PortalModule } from '@angular/cdk/portal';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDatepickerModule, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatCalendar, NgxMatCalendarHeader } from './calendar';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { NgxMatDatetimeContent, NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { NgxMatMultiYearView } from './multi-year-view';\r\nimport { NgxMatTimepickerModule } from './timepicker.module';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      MatDatepickerModule,\r\n      MatDialogModule,\r\n      PortalModule,\r\n      FormsModule,\r\n      MatIconModule,\r\n      MatButtonModule,\r\n      MatInputModule,\r\n      NgxMatTimepickerModule\r\n   ],\r\n   exports: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   declarations: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeContent,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   entryComponents: [\r\n      NgxMatDatetimeContent,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   providers: [\r\n      MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n   ]\r\n})\r\nexport class NgxMatDatetimePickerModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NgxMatNativeDateAdapter extends NgxMatDateAdapter<Date> {\r\n\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from its utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i =>\r\n        this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds()\r\n  }\r\n\r\n  setHour(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n  setMinute(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n  setSecond(date: Date, value: number): void {\r\n    date.setSeconds(value);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(Date.UTC(\r\n      date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n      date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","import { NgxMatDateFormats } from './date-formats';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nconst DEFAULT_DATE_INPUT = {\r\n  year: 'numeric', month: 'numeric', day: 'numeric',\r\n  hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n}\r\n\r\nexport const NGX_MAT_NATIVE_DATE_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\nimport { NgxMatNativeDateAdapter } from './native-date-adapter';\r\nimport { NGX_MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\nimport { NGX_MAT_DATE_FORMATS } from './date-formats';\r\n\r\n\r\n@NgModule({\r\n    imports: [PlatformModule],\r\n    providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ],\r\n})\r\nexport class NgxNativeDateModule { }\r\n\r\n@NgModule({\r\n    imports: [NgxNativeDateModule],\r\n    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n})\r\nexport class NgxMatNativeDateModule { }\r\n"],"names":["tslib_1.__extends","DateAdapter","InjectionToken","EventEmitter","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","SPACE","MatCalendarCell","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Optional","Inject","Directionality","Input","Output","ViewChild","MatCalendarBody","MatDatepickerIntl","forwardRef","Subject","ComponentPortal","Validators","takeUntil","debounceTime","input","NG_VALUE_ACCESSOR","FormBuilder","mixinColor","matDatepickerAnimations","ElementRef","Subscription","coerceBooleanProperty","take","OverlayConfig","merge","filter","ESCAPE","MatDialog","Overlay","NgZone","ViewContainerRef","MAT_DATEPICKER_SCROLL_STRATEGY","DOCUMENT","NG_VALIDATORS","Directive","MAT_INPUT_VALUE_ACCESSOR","MatFormField","NgModule","CommonModule","MatInputModule","ReactiveFormsModule","FormsModule","MatIconModule","MatButtonModule","MatDatepickerModule","MatDialogModule","PortalModule","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","platform","Injectable","MAT_DATE_LOCALE","Platform","PlatformModule"],"mappings":"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"}
