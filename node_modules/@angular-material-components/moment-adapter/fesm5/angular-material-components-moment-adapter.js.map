{"version":3,"file":"angular-material-components-moment-adapter.js.map","sources":["ng://@angular-material-components/moment-adapter/lib/moment-adapter.ts","ng://@angular-material-components/moment-adapter/lib/moment-formats.ts","ng://@angular-material-components/moment-adapter/lib/moment-adapter.module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\n// Depending on whether rollup is used, moment needs to be imported differently.\r\n// Since Moment.js doesn't have a default export, we normally need to import using the `* as`\r\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\r\n// the `default as` syntax.\r\n// TODO(mmalerba): See if we can clean this up at some point.\r\nimport * as _moment from 'moment';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { default as _rollupMoment, Moment, MomentFormatSpecification, MomentInput } from 'moment';\r\nimport { NgxMatDateAdapter } from '@angular-material-components/datetime-picker';\r\n\r\nconst moment = _rollupMoment || _moment;\r\n\r\n/** Configurable options for {@see MomentDateAdapter}. */\r\nexport interface NgxMatMomentDateAdapterOptions {\r\n\r\n  /**\r\n   * When enabled, the dates have to match the format exactly.\r\n   * See https://momentjs.com/guides/#/parsing/strict-mode/.\r\n   */\r\n  strict?: boolean;\r\n\r\n  /**\r\n   * Turns the use of utc dates on or off.\r\n   * Changing this will change how Angular Material components like DatePicker output dates.\r\n   * {@default false}\r\n   */\r\n  useUtc?: boolean;\r\n}\r\n\r\n/** InjectionToken for moment date adapter to configure options. */\r\nexport const NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken<NgxMatMomentDateAdapterOptions>(\r\n  'NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\r\n  providedIn: 'root',\r\n  factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\r\n});\r\n\r\n\r\n/** @docs-private */\r\nexport function NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY(): NgxMatMomentDateAdapterOptions {\r\n  return {\r\n    useUtc: false\r\n  };\r\n}\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class NgxMatMomentAdapter extends NgxMatDateAdapter<Moment> {\r\n\r\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\r\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\r\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\r\n  // input would mutate the object.\r\n\r\n  private _localeData: {\r\n    firstDayOfWeek: number,\r\n    longMonths: string[],\r\n    shortMonths: string[],\r\n    dates: string[],\r\n    longDaysOfWeek: string[],\r\n    shortDaysOfWeek: string[],\r\n    narrowDaysOfWeek: string[]\r\n  };\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string,\r\n    @Optional() @Inject(NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS)\r\n    private _options?: NgxMatMomentDateAdapterOptions) {\r\n\r\n    super();\r\n    this.setLocale(dateLocale || moment.locale());\r\n  }\r\n\r\n  setLocale(locale: string) {\r\n    super.setLocale(locale);\r\n\r\n    let momentLocaleData = moment.localeData(locale);\r\n    this._localeData = {\r\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n      longMonths: momentLocaleData.months(),\r\n      shortMonths: momentLocaleData.monthsShort(),\r\n      dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\r\n      longDaysOfWeek: momentLocaleData.weekdays(),\r\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\r\n    };\r\n  }\r\n\r\n  getYear(date: Moment): number {\r\n    return this.clone(date).year();\r\n  }\r\n\r\n  getMonth(date: Moment): number {\r\n    return this.clone(date).month();\r\n  }\r\n\r\n  getDate(date: Moment): number {\r\n    return this.clone(date).date();\r\n  }\r\n\r\n  getDayOfWeek(date: Moment): number {\r\n    return this.clone(date).day();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n    return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._localeData.dates;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (style == 'long') {\r\n      return this._localeData.longDaysOfWeek;\r\n    }\r\n    if (style == 'short') {\r\n      return this._localeData.shortDaysOfWeek;\r\n    }\r\n    return this._localeData.narrowDaysOfWeek;\r\n  }\r\n\r\n  getYearName(date: Moment): string {\r\n    return this.clone(date).format('YYYY');\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._localeData.firstDayOfWeek;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Moment): number {\r\n    return this.clone(date).daysInMonth();\r\n  }\r\n\r\n  clone(date: Moment): Moment {\r\n    return date.clone().locale(this.locale);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Moment {\r\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n    // explicitly check each case so we can throw more descriptive errors.\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = this._createMoment({ year, month, date }).locale(this.locale);\r\n\r\n    // If the result isn't valid, the date must have been out of bounds for this month.\r\n    if (!result.isValid()) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Moment {\r\n    return this._createMoment().locale(this.locale);\r\n  }\r\n\r\n  parse(value: any, parseFormat: string | string[]): Moment | null {\r\n    if (value && typeof value == 'string') {\r\n      return this._createMoment(value, parseFormat, this.locale);\r\n    }\r\n    return value ? this._createMoment(value).locale(this.locale) : null;\r\n  }\r\n\r\n  format(date: Moment, displayFormat: string): string {\r\n    date = this.clone(date);\r\n    if (!this.isValid(date)) {\r\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Moment, years: number): Moment {\r\n    return this.clone(date).add({ years });\r\n  }\r\n\r\n  addCalendarMonths(date: Moment, months: number): Moment {\r\n    return this.clone(date).add({ months });\r\n  }\r\n\r\n  addCalendarDays(date: Moment, days: number): Moment {\r\n    return this.clone(date).add({ days });\r\n  }\r\n\r\n  toIso8601(date: Moment): string {\r\n    return this.clone(date).format();\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n   * string into null. Returns an invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Moment | null {\r\n    let date;\r\n    if (value instanceof Date) {\r\n      date = this._createMoment(value).locale(this.locale);\r\n    } else if (this.isDateInstance(value)) {\r\n      // Note: assumes that cloning also sets the correct locale.\r\n      return this.clone(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\r\n    }\r\n    if (date && this.isValid(date)) {\r\n      return this._createMoment(date).locale(this.locale);\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return moment.isMoment(obj);\r\n  }\r\n\r\n  isValid(date: Moment): boolean {\r\n    return this.clone(date).isValid();\r\n  }\r\n\r\n  invalid(): Moment {\r\n    return moment.invalid();\r\n  }\r\n\r\n  getHour(date: _moment.Moment): number {\r\n    return date.hours();\r\n  }\r\n  getMinute(date: _moment.Moment): number {\r\n    return date.minutes();\r\n  }\r\n  getSecond(date: _moment.Moment): number {\r\n    return date.seconds();\r\n  }\r\n  setHour(date: _moment.Moment, value: number): void {\r\n    date.hours(value);\r\n  }\r\n  setMinute(date: _moment.Moment, value: number): void {\r\n    date.minutes(value)\r\n  }\r\n  setSecond(date: _moment.Moment, value: number): void {\r\n    date.seconds(value);\r\n  }\r\n\r\n  /** Creates a Moment instance while respecting the current UTC settings. */\r\n  private _createMoment(\r\n    date: MomentInput,\r\n    format?: MomentFormatSpecification,\r\n    locale?: string,\r\n  ): Moment {\r\n    const { strict, useUtc }: NgxMatMomentDateAdapterOptions = this._options || {};\r\n\r\n    return useUtc\r\n      ? moment.utc(date, format, locale, strict)\r\n      : moment(date, format, locale, strict);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgxMatDateFormats } from '@angular-material-components/datetime-picker';\r\n\r\nconst DEFAULT_DATE_INPUT = 'l, LTS';\r\n\r\nexport const NGX_MAT_MOMENT_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\r\nimport { NgModule } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatMomentAdapter, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS } from './moment-adapter';\r\nimport { NGX_MAT_MOMENT_FORMATS } from './moment-formats';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: NgxMatDateAdapter,\r\n      useClass: NgxMatMomentAdapter,\r\n      deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n    }\r\n  ],\r\n})\r\nexport class NgxMomentDateModule { }\r\n\r\n\r\n@NgModule({\r\n  imports: [NgxMomentDateModule],\r\n  providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }],\r\n})\r\nexport class NgxMatMomentModule { }\r\n"],"names":["_rollupMoment","_moment","tslib_1.__extends"],"mappings":"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"}
